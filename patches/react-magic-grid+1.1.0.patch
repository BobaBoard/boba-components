diff --git a/node_modules/react-magic-grid/dist/react-magic-grid.cjs.js b/node_modules/react-magic-grid/dist/react-magic-grid.cjs.js
index 509fa91..9802671 100644
--- a/node_modules/react-magic-grid/dist/react-magic-grid.cjs.js
+++ b/node_modules/react-magic-grid/dist/react-magic-grid.cjs.js
@@ -1,11 +1,14 @@
 'use strict';
 
-function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
-
 var React = require('react');
-var React__default = _interopDefault(React);
-var PropTypes = _interopDefault(require('prop-types'));
-var MagicGrid = _interopDefault(require('magic-grid'));
+var PropTypes = require('prop-types');
+var MagicGrid = require('magic-grid');
+
+function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+
+var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
+var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
+var MagicGrid__default = /*#__PURE__*/_interopDefaultLegacy(MagicGrid);
 
 function _defineProperty(obj, key, value) {
   if (key in obj) {
@@ -41,13 +44,13 @@ function _objectSpread2(target) {
     var source = arguments[i] != null ? arguments[i] : {};
 
     if (i % 2) {
-      ownKeys(source, true).forEach(function (key) {
+      ownKeys(Object(source), true).forEach(function (key) {
         _defineProperty(target, key, source[key]);
       });
     } else if (Object.getOwnPropertyDescriptors) {
       Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
     } else {
-      ownKeys(source).forEach(function (key) {
+      ownKeys(Object(source)).forEach(function (key) {
         Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
       });
     }
@@ -92,13 +95,13 @@ function _objectWithoutProperties(source, excluded) {
   return target;
 }
 
-var MagicGridWrapper = function MagicGridWrapper(_ref) {
+var MagicGridWrapper = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
   var children = _ref.children,
       props = _objectWithoutProperties(_ref, ["children"]);
 
   var container = React.useRef(null);
+  var grid = /*#__PURE__*/React.createRef();
   React.useEffect(function () {
-    var grid = null;
     var timeout; // magic-grid handles resizing via its own `listen` method
     // unfortunately event listener it creates is not being cleaned up
     // that's why we don't use it and have our own instead
@@ -106,30 +109,36 @@ var MagicGridWrapper = function MagicGridWrapper(_ref) {
 
     var resize = function resize() {
       if (!timeout) timeout = setTimeout(function () {
-        grid && grid.positionItems();
+        grid.current && grid.current.positionItems();
         timeout = null;
       }, 200);
     };
 
-    if (!grid) {
-      grid = new MagicGrid(_objectSpread2({
+    if (!grid.current) {
+      grid.current = new MagicGrid__default['default'](_objectSpread2({
         container: container.current
       }, props));
       window.addEventListener("resize", resize);
     }
 
-    grid.positionItems();
+    grid.current.positionItems();
     return function () {
       window.removeEventListener("resize", resize);
     };
   });
-  return React__default.createElement("div", {
+  React.useImperativeHandle(ref, function () {
+    return {
+      positionItems: function positionItems() {
+        grid.current && grid.current.positionItems();
+      }
+    };
+  });
+  return /*#__PURE__*/React__default['default'].createElement("div", {
     ref: container
   }, children);
-};
-
+});
 MagicGridWrapper.propTypes = {
-  children: PropTypes.arrayOf(PropTypes.node)
+  children: PropTypes__default['default'].arrayOf(PropTypes__default['default'].node)
 };
 
 module.exports = MagicGridWrapper;
diff --git a/node_modules/react-magic-grid/dist/react-magic-grid.es.js b/node_modules/react-magic-grid/dist/react-magic-grid.es.js
index cd73068..a2a8465 100644
--- a/node_modules/react-magic-grid/dist/react-magic-grid.es.js
+++ b/node_modules/react-magic-grid/dist/react-magic-grid.es.js
@@ -1,4 +1,4 @@
-import React, { useRef, useEffect } from 'react';
+import React, { forwardRef, useRef, useEffect, useImperativeHandle, createRef } from 'react';
 import PropTypes from 'prop-types';
 import MagicGrid from 'magic-grid';
 
@@ -36,13 +36,13 @@ function _objectSpread2(target) {
     var source = arguments[i] != null ? arguments[i] : {};
 
     if (i % 2) {
-      ownKeys(source, true).forEach(function (key) {
+      ownKeys(Object(source), true).forEach(function (key) {
         _defineProperty(target, key, source[key]);
       });
     } else if (Object.getOwnPropertyDescriptors) {
       Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
     } else {
-      ownKeys(source).forEach(function (key) {
+      ownKeys(Object(source)).forEach(function (key) {
         Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
       });
     }
@@ -87,13 +87,13 @@ function _objectWithoutProperties(source, excluded) {
   return target;
 }
 
-var MagicGridWrapper = function MagicGridWrapper(_ref) {
+var MagicGridWrapper = /*#__PURE__*/forwardRef(function (_ref, ref) {
   var children = _ref.children,
       props = _objectWithoutProperties(_ref, ["children"]);
 
   var container = useRef(null);
+  var grid = /*#__PURE__*/createRef();
   useEffect(function () {
-    var grid = null;
     var timeout; // magic-grid handles resizing via its own `listen` method
     // unfortunately event listener it creates is not being cleaned up
     // that's why we don't use it and have our own instead
@@ -101,28 +101,34 @@ var MagicGridWrapper = function MagicGridWrapper(_ref) {
 
     var resize = function resize() {
       if (!timeout) timeout = setTimeout(function () {
-        grid && grid.positionItems();
+        grid.current && grid.current.positionItems();
         timeout = null;
       }, 200);
     };
 
-    if (!grid) {
-      grid = new MagicGrid(_objectSpread2({
+    if (!grid.current) {
+      grid.current = new MagicGrid(_objectSpread2({
         container: container.current
       }, props));
       window.addEventListener("resize", resize);
     }
 
-    grid.positionItems();
+    grid.current.positionItems();
     return function () {
       window.removeEventListener("resize", resize);
     };
   });
-  return React.createElement("div", {
+  useImperativeHandle(ref, function () {
+    return {
+      positionItems: function positionItems() {
+        grid.current && grid.current.positionItems();
+      }
+    };
+  });
+  return /*#__PURE__*/React.createElement("div", {
     ref: container
   }, children);
-};
-
+});
 MagicGridWrapper.propTypes = {
   children: PropTypes.arrayOf(PropTypes.node)
 };
diff --git a/node_modules/react-magic-grid/dist/react-magic-grid.umd.js b/node_modules/react-magic-grid/dist/react-magic-grid.umd.js
index 86c310c..bed4f87 100644
--- a/node_modules/react-magic-grid/dist/react-magic-grid.umd.js
+++ b/node_modules/react-magic-grid/dist/react-magic-grid.umd.js
@@ -1,8 +1,8 @@
 (function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
   typeof define === 'function' && define.amd ? define(factory) :
-  (global = global || self, global.ReactMagicGrid = factory());
-}(this, function () { 'use strict';
+  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactMagicGrid = factory());
+}(this, (function () { 'use strict';
 
   function _defineProperty(obj, key, value) {
     if (key in obj) {
@@ -38,13 +38,13 @@
       var source = arguments[i] != null ? arguments[i] : {};
 
       if (i % 2) {
-        ownKeys(source, true).forEach(function (key) {
+        ownKeys(Object(source), true).forEach(function (key) {
           _defineProperty(target, key, source[key]);
         });
       } else if (Object.getOwnPropertyDescriptors) {
         Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
       } else {
-        ownKeys(source).forEach(function (key) {
+        ownKeys(Object(source)).forEach(function (key) {
           Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
         });
       }
@@ -186,22 +186,53 @@
   	return to;
   };
 
-  var n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,aa=n?Symbol.for("react.suspense_list"):60120,ba=n?Symbol.for("react.memo"):
-  60115,ca=n?Symbol.for("react.lazy"):60116;var z="function"===typeof Symbol&&Symbol.iterator;
-  function A(a){for(var b=a.message,d="https://reactjs.org/docs/error-decoder.html?invariant="+b,c=1;c<arguments.length;c++)d+="&args[]="+encodeURIComponent(arguments[c]);a.message="Minified React error #"+b+"; visit "+d+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ";return a}var B={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C={};
-  function D(a,b,d){this.props=a;this.context=b;this.refs=C;this.updater=d||B;}D.prototype.isReactComponent={};D.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw A(Error(85));this.updater.enqueueSetState(this,a,b,"setState");};D.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function E(){}E.prototype=D.prototype;function F(a,b,d){this.props=a;this.context=b;this.refs=C;this.updater=d||B;}var G=F.prototype=new E;
-  G.constructor=F;objectAssign(G,D.prototype);G.isPureReactComponent=!0;var H={current:null},I={suspense:null},J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
-  function M(a,b,d){var c=void 0,e={},g=null,k=null;if(null!=b)for(c in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,c)&&!L.hasOwnProperty(c)&&(e[c]=b[c]);var f=arguments.length-2;if(1===f)e.children=d;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];e.children=l;}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===e[c]&&(e[c]=f[c]);return {$$typeof:p,type:a,key:g,ref:k,props:e,_owner:J.current}}
-  function da(a,b){return {$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return "object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return "$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\/+/g,P=[];function Q(a,b,d,c){if(P.length){var e=P.pop();e.result=a;e.keyPrefix=b;e.func=d;e.context=c;e.count=0;return e}return {result:a,keyPrefix:b,func:d,context:c,count:0}}
-  function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a);}
-  function S(a,b,d,c){var e=typeof a;if("undefined"===e||"boolean"===e)a=null;var g=!1;if(null===a)g=!0;else switch(e){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0;}}if(g)return d(c,a,""===b?"."+T(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){e=a[k];var f=b+T(e,k);g+=S(e,f,d,c);}else if(null===a||"object"!==typeof a?f=null:(f=z&&a[z]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
-  0;!(e=a.next()).done;)e=e.value,f=b+T(e,k++),g+=S(e,f,d,c);else if("object"===e)throw d=""+a,A(Error(31),"[object Object]"===d?"object with keys {"+Object.keys(a).join(", ")+"}":d,"");return g}function U(a,b,d){return null==a?0:S(a,"",b,d)}function T(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ea(a,b){a.func.call(a.context,b,a.count++);}
-  function fa(a,b,d){var c=a.result,e=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?V(a,c,d,function(a){return a}):null!=a&&(N(a)&&(a=da(a,e+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+d)),c.push(a));}function V(a,b,d,c,e){var g="";null!=d&&(g=(""+d).replace(O,"$&/")+"/");b=Q(b,g,c,e);U(a,fa,b);R(b);}function W(){var a=H.current;if(null===a)throw A(Error(321));return a}
-  var X={Children:{map:function(a,b,d){if(null==a)return a;var c=[];V(a,c,null,b,d);return c},forEach:function(a,b,d){if(null==a)return a;b=Q(null,null,b,d);U(a,ea,b);R(b);},count:function(a){return U(a,function(){return null},null)},toArray:function(a){var b=[];V(a,b,null,function(a){return a});return b},only:function(a){if(!N(a))throw A(Error(143));return a}},createRef:function(){return {current:null}},Component:D,PureComponent:F,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,
-  _currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return {$$typeof:x,render:a}},lazy:function(a){return {$$typeof:ca,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return {$$typeof:ba,type:a,compare:void 0===b?null:b}},useCallback:function(a,b){return W().useCallback(a,b)},useContext:function(a,b){return W().useContext(a,b)},useEffect:function(a,b){return W().useEffect(a,b)},useImperativeHandle:function(a,
-  b,d){return W().useImperativeHandle(a,b,d)},useDebugValue:function(){},useLayoutEffect:function(a,b){return W().useLayoutEffect(a,b)},useMemo:function(a,b){return W().useMemo(a,b)},useReducer:function(a,b,d){return W().useReducer(a,b,d)},useRef:function(a){return W().useRef(a)},useState:function(a){return W().useState(a)},Fragment:r,Profiler:u,StrictMode:t,Suspense:y,unstable_SuspenseList:aa,createElement:M,cloneElement:function(a,b,d){if(null===a||void 0===a)throw A(Error(267),a);var c=void 0,e=
-  objectAssign({},a.props),g=a.key,k=a.ref,f=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,f=J.current);void 0!==b.key&&(g=""+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)K.call(b,c)&&!L.hasOwnProperty(c)&&(e[c]=void 0===b[c]&&void 0!==l?l[c]:b[c]);}c=arguments.length-2;if(1===c)e.children=d;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];e.children=l;}return {$$typeof:p,type:a.type,key:g,ref:k,props:e,_owner:f}},createFactory:function(a){var b=M.bind(null,a);
-  b.type=a;return b},isValidElement:N,version:"16.9.0",unstable_withSuspenseConfig:function(a,b){var d=I.suspense;I.suspense=void 0===b?null:b;try{a();}finally{I.suspense=d;}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:H,ReactCurrentBatchConfig:I,ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:objectAssign}},Y={default:X},Z=Y&&X||Y;var react_production_min=Z.default||Z;
+  var n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
+  60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
+  var D={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D;}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState");};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};
+  function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D;}var I=H.prototype=new G;I.constructor=H;objectAssign(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
+  function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h;}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return {$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
+  function N(a,b){return {$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return "$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return {result:a,keyPrefix:b,func:c,context:e,count:0}}
+  function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a);}
+  function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0;}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e);}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
+  0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++);}
+  function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a));}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b);}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
+  var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:objectAssign};var Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b);},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
+  var Component=F;var Fragment=r;var Profiler=u;var PureComponent=H;var StrictMode=t;var Suspense=y;var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
+  var cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=objectAssign({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h]);}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f;}return {$$typeof:p,type:a.type,
+  key:d,ref:g,props:e,_owner:k}};var createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};var createElement=M;var createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};var createRef=function(){return {current:null}};var forwardRef=function(a){return {$$typeof:x,render:a}};var isValidElement=O;
+  var lazy=function(a){return {$$typeof:A,_ctor:a,_status:-1,_result:null}};var memo=function(a,b){return {$$typeof:z,type:a,compare:void 0===b?null:b}};var useCallback=function(a,b){return Z().useCallback(a,b)};var useContext=function(a,b){return Z().useContext(a,b)};var useDebugValue=function(){};var useEffect=function(a,b){return Z().useEffect(a,b)};var useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
+  var useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};var useMemo=function(a,b){return Z().useMemo(a,b)};var useReducer=function(a,b,c){return Z().useReducer(a,b,c)};var useRef=function(a){return Z().useRef(a)};var useState=function(a){return Z().useState(a)};var version="16.13.1";
+
+  var react_production_min = {
+  	Children: Children,
+  	Component: Component,
+  	Fragment: Fragment,
+  	Profiler: Profiler,
+  	PureComponent: PureComponent,
+  	StrictMode: StrictMode,
+  	Suspense: Suspense,
+  	__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
+  	cloneElement: cloneElement,
+  	createContext: createContext,
+  	createElement: createElement,
+  	createFactory: createFactory,
+  	createRef: createRef,
+  	forwardRef: forwardRef,
+  	isValidElement: isValidElement,
+  	lazy: lazy,
+  	memo: memo,
+  	useCallback: useCallback,
+  	useContext: useContext,
+  	useDebugValue: useDebugValue,
+  	useEffect: useEffect,
+  	useImperativeHandle: useImperativeHandle,
+  	useLayoutEffect: useLayoutEffect,
+  	useMemo: useMemo,
+  	useReducer: useReducer,
+  	useRef: useRef,
+  	useState: useState,
+  	version: version
+  };
 
   /**
    * Copyright (c) 2013-present, Facebook, Inc.
@@ -308,7 +339,7 @@
 
   var checkPropTypes_1 = checkPropTypes;
 
-  var react_development = createCommonjsModule(function (module) {
+  var react_development = createCommonjsModule(function (module, exports) {
 
 
 
@@ -318,385 +349,42 @@
   var _assign = objectAssign;
   var checkPropTypes = checkPropTypes_1;
 
-  // TODO: this is special because it gets imported during build.
-
-  var ReactVersion = '16.9.0';
+  var ReactVersion = '16.13.1';
 
   // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
   // nor polyfill, then a plain number is used for performance.
   var hasSymbol = typeof Symbol === 'function' && Symbol.for;
-
   var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
   var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
   var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
   var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
   var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
   var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
-  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
-  // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
-  // (unstable) APIs that have been removed. Can we remove the symbols?
-
+  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
   var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
   var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
   var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
   var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
   var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
   var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
+  var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
   var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
   var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
-
+  var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
   var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
   var FAUX_ITERATOR_SYMBOL = '@@iterator';
-
   function getIteratorFn(maybeIterable) {
     if (maybeIterable === null || typeof maybeIterable !== 'object') {
       return null;
     }
+
     var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
+
     if (typeof maybeIterator === 'function') {
       return maybeIterator;
     }
-    return null;
-  }
-
-  // Do not require this module directly! Use normal `invariant` calls with
-  // template literal strings. The messages will be converted to ReactError during
-  // build, and in production they will be minified.
-
-  // Do not require this module directly! Use normal `invariant` calls with
-  // template literal strings. The messages will be converted to ReactError during
-  // build, and in production they will be minified.
-
-  function ReactError(error) {
-    error.name = 'Invariant Violation';
-    return error;
-  }
 
-  /**
-   * Use invariant() to assert state which your program assumes to be true.
-   *
-   * Provide sprintf-style format (only %s is supported) and arguments
-   * to provide information about what broke and what you were
-   * expecting.
-   *
-   * The invariant message will be stripped in production, but the invariant
-   * will remain to ensure logic does not differ in production.
-   */
-
-  /**
-   * Forked from fbjs/warning:
-   * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
-   *
-   * Only change is we use console.warn instead of console.error,
-   * and do nothing when 'console' is not supported.
-   * This really simplifies the code.
-   * ---
-   * Similar to invariant but only logs a warning if the condition is not met.
-   * This can be used to log issues in development environments in critical
-   * paths. Removing the logging code for production environments will keep the
-   * same logic and follow the same code paths.
-   */
-
-  var lowPriorityWarning = function () {};
-
-  {
-    var printWarning = function (format) {
-      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
-        args[_key - 1] = arguments[_key];
-      }
-
-      var argIndex = 0;
-      var message = 'Warning: ' + format.replace(/%s/g, function () {
-        return args[argIndex++];
-      });
-      if (typeof console !== 'undefined') {
-        console.warn(message);
-      }
-      try {
-        // --- Welcome to debugging React ---
-        // This error was thrown as a convenience so that you can use this stack
-        // to find the callsite that caused this warning to fire.
-        throw new Error(message);
-      } catch (x) {}
-    };
-
-    lowPriorityWarning = function (condition, format) {
-      if (format === undefined) {
-        throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
-      }
-      if (!condition) {
-        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
-          args[_key2 - 2] = arguments[_key2];
-        }
-
-        printWarning.apply(undefined, [format].concat(args));
-      }
-    };
-  }
-
-  var lowPriorityWarning$1 = lowPriorityWarning;
-
-  /**
-   * Similar to invariant but only logs a warning if the condition is not met.
-   * This can be used to log issues in development environments in critical
-   * paths. Removing the logging code for production environments will keep the
-   * same logic and follow the same code paths.
-   */
-
-  var warningWithoutStack = function () {};
-
-  {
-    warningWithoutStack = function (condition, format) {
-      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
-        args[_key - 2] = arguments[_key];
-      }
-
-      if (format === undefined) {
-        throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
-      }
-      if (args.length > 8) {
-        // Check before the condition to catch violations early.
-        throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
-      }
-      if (condition) {
-        return;
-      }
-      if (typeof console !== 'undefined') {
-        var argsWithFormat = args.map(function (item) {
-          return '' + item;
-        });
-        argsWithFormat.unshift('Warning: ' + format);
-
-        // We intentionally don't use spread (or .apply) directly because it
-        // breaks IE9: https://github.com/facebook/react/issues/13610
-        Function.prototype.apply.call(console.error, console, argsWithFormat);
-      }
-      try {
-        // --- Welcome to debugging React ---
-        // This error was thrown as a convenience so that you can use this stack
-        // to find the callsite that caused this warning to fire.
-        var argIndex = 0;
-        var message = 'Warning: ' + format.replace(/%s/g, function () {
-          return args[argIndex++];
-        });
-        throw new Error(message);
-      } catch (x) {}
-    };
-  }
-
-  var warningWithoutStack$1 = warningWithoutStack;
-
-  var didWarnStateUpdateForUnmountedComponent = {};
-
-  function warnNoop(publicInstance, callerName) {
-    {
-      var _constructor = publicInstance.constructor;
-      var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
-      var warningKey = componentName + '.' + callerName;
-      if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
-        return;
-      }
-      warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
-      didWarnStateUpdateForUnmountedComponent[warningKey] = true;
-    }
-  }
-
-  /**
-   * This is the abstract API for an update queue.
-   */
-  var ReactNoopUpdateQueue = {
-    /**
-     * Checks whether or not this composite component is mounted.
-     * @param {ReactClass} publicInstance The instance we want to test.
-     * @return {boolean} True if mounted, false otherwise.
-     * @protected
-     * @final
-     */
-    isMounted: function (publicInstance) {
-      return false;
-    },
-
-    /**
-     * Forces an update. This should only be invoked when it is known with
-     * certainty that we are **not** in a DOM transaction.
-     *
-     * You may want to call this when you know that some deeper aspect of the
-     * component's state has changed but `setState` was not called.
-     *
-     * This will not invoke `shouldComponentUpdate`, but it will invoke
-     * `componentWillUpdate` and `componentDidUpdate`.
-     *
-     * @param {ReactClass} publicInstance The instance that should rerender.
-     * @param {?function} callback Called after component is updated.
-     * @param {?string} callerName name of the calling function in the public API.
-     * @internal
-     */
-    enqueueForceUpdate: function (publicInstance, callback, callerName) {
-      warnNoop(publicInstance, 'forceUpdate');
-    },
-
-    /**
-     * Replaces all of the state. Always use this or `setState` to mutate state.
-     * You should treat `this.state` as immutable.
-     *
-     * There is no guarantee that `this.state` will be immediately updated, so
-     * accessing `this.state` after calling this method may return the old value.
-     *
-     * @param {ReactClass} publicInstance The instance that should rerender.
-     * @param {object} completeState Next state.
-     * @param {?function} callback Called after component is updated.
-     * @param {?string} callerName name of the calling function in the public API.
-     * @internal
-     */
-    enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
-      warnNoop(publicInstance, 'replaceState');
-    },
-
-    /**
-     * Sets a subset of the state. This only exists because _pendingState is
-     * internal. This provides a merging strategy that is not available to deep
-     * properties which is confusing. TODO: Expose pendingState or don't use it
-     * during the merge.
-     *
-     * @param {ReactClass} publicInstance The instance that should rerender.
-     * @param {object} partialState Next partial state to be merged with state.
-     * @param {?function} callback Called after component is updated.
-     * @param {?string} Name of the calling function in the public API.
-     * @internal
-     */
-    enqueueSetState: function (publicInstance, partialState, callback, callerName) {
-      warnNoop(publicInstance, 'setState');
-    }
-  };
-
-  var emptyObject = {};
-  {
-    Object.freeze(emptyObject);
-  }
-
-  /**
-   * Base class helpers for the updating state of a component.
-   */
-  function Component(props, context, updater) {
-    this.props = props;
-    this.context = context;
-    // If a component has string refs, we will assign a different object later.
-    this.refs = emptyObject;
-    // We initialize the default updater but the real one gets injected by the
-    // renderer.
-    this.updater = updater || ReactNoopUpdateQueue;
-  }
-
-  Component.prototype.isReactComponent = {};
-
-  /**
-   * Sets a subset of the state. Always use this to mutate
-   * state. You should treat `this.state` as immutable.
-   *
-   * There is no guarantee that `this.state` will be immediately updated, so
-   * accessing `this.state` after calling this method may return the old value.
-   *
-   * There is no guarantee that calls to `setState` will run synchronously,
-   * as they may eventually be batched together.  You can provide an optional
-   * callback that will be executed when the call to setState is actually
-   * completed.
-   *
-   * When a function is provided to setState, it will be called at some point in
-   * the future (not synchronously). It will be called with the up to date
-   * component arguments (state, props, context). These values can be different
-   * from this.* because your function may be called after receiveProps but before
-   * shouldComponentUpdate, and this new state, props, and context will not yet be
-   * assigned to this.
-   *
-   * @param {object|function} partialState Next partial state or function to
-   *        produce next partial state to be merged with current state.
-   * @param {?function} callback Called after state is updated.
-   * @final
-   * @protected
-   */
-  Component.prototype.setState = function (partialState, callback) {
-    (function () {
-      if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
-        {
-          throw ReactError(Error('setState(...): takes an object of state variables to update or a function which returns an object of state variables.'));
-        }
-      }
-    })();
-    this.updater.enqueueSetState(this, partialState, callback, 'setState');
-  };
-
-  /**
-   * Forces an update. This should only be invoked when it is known with
-   * certainty that we are **not** in a DOM transaction.
-   *
-   * You may want to call this when you know that some deeper aspect of the
-   * component's state has changed but `setState` was not called.
-   *
-   * This will not invoke `shouldComponentUpdate`, but it will invoke
-   * `componentWillUpdate` and `componentDidUpdate`.
-   *
-   * @param {?function} callback Called after update is complete.
-   * @final
-   * @protected
-   */
-  Component.prototype.forceUpdate = function (callback) {
-    this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
-  };
-
-  /**
-   * Deprecated APIs. These APIs used to exist on classic React classes but since
-   * we would like to deprecate them, we're not going to move them over to this
-   * modern base class. Instead, we define a getter that warns if it's accessed.
-   */
-  {
-    var deprecatedAPIs = {
-      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
-      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
-    };
-    var defineDeprecationWarning = function (methodName, info) {
-      Object.defineProperty(Component.prototype, methodName, {
-        get: function () {
-          lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
-          return undefined;
-        }
-      });
-    };
-    for (var fnName in deprecatedAPIs) {
-      if (deprecatedAPIs.hasOwnProperty(fnName)) {
-        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
-      }
-    }
-  }
-
-  function ComponentDummy() {}
-  ComponentDummy.prototype = Component.prototype;
-
-  /**
-   * Convenience component with default shallow equality check for sCU.
-   */
-  function PureComponent(props, context, updater) {
-    this.props = props;
-    this.context = context;
-    // If a component has string refs, we will assign a different object later.
-    this.refs = emptyObject;
-    this.updater = updater || ReactNoopUpdateQueue;
-  }
-
-  var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
-  pureComponentPrototype.constructor = PureComponent;
-  // Avoid an extra prototype jump for these methods.
-  _assign(pureComponentPrototype, Component.prototype);
-  pureComponentPrototype.isPureReactComponent = true;
-
-  // an immutable object with a single mutable value
-  function createRef() {
-    var refObject = {
-      current: null
-    };
-    {
-      Object.seal(refObject);
-    }
-    return refObject;
+    return null;
   }
 
   /**
@@ -733,19 +421,22 @@
   };
 
   var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
-
-  var describeComponentFrame = function (name, source, ownerName) {
+  function describeComponentFrame (name, source, ownerName) {
     var sourceInfo = '';
+
     if (source) {
       var path = source.fileName;
       var fileName = path.replace(BEFORE_SLASH_RE, '');
+
       {
         // In DEV, include code for a common special case:
         // prefer "folder/index.js" instead of just "index.js".
         if (/^index\./.test(fileName)) {
           var match = path.match(BEFORE_SLASH_RE);
+
           if (match) {
             var pathBeforeSlash = match[1];
+
             if (pathBeforeSlash) {
               var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
               fileName = folderName + '/' + fileName;
@@ -753,23 +444,23 @@
           }
         }
       }
+
       sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
     } else if (ownerName) {
       sourceInfo = ' (created by ' + ownerName + ')';
     }
+
     return '\n    in ' + (name || 'Unknown') + sourceInfo;
-  };
+  }
 
   var Resolved = 1;
-
-
   function refineResolvedLazyComponent(lazyComponent) {
     return lazyComponent._status === Resolved ? lazyComponent._result : null;
   }
 
   function getWrappedName(outerType, innerType, wrapperName) {
     var functionName = innerType.displayName || innerType.name || '';
-    return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
+    return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
   }
 
   function getComponentName(type) {
@@ -777,165 +468,447 @@
       // Host root, text node or just invalid type.
       return null;
     }
+
     {
       if (typeof type.tag === 'number') {
-        warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
+        error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
       }
     }
+
     if (typeof type === 'function') {
       return type.displayName || type.name || null;
     }
+
     if (typeof type === 'string') {
       return type;
     }
+
     switch (type) {
       case REACT_FRAGMENT_TYPE:
         return 'Fragment';
+
       case REACT_PORTAL_TYPE:
         return 'Portal';
+
       case REACT_PROFILER_TYPE:
-        return 'Profiler';
+        return "Profiler";
+
       case REACT_STRICT_MODE_TYPE:
         return 'StrictMode';
+
       case REACT_SUSPENSE_TYPE:
         return 'Suspense';
+
       case REACT_SUSPENSE_LIST_TYPE:
         return 'SuspenseList';
     }
+
     if (typeof type === 'object') {
       switch (type.$$typeof) {
         case REACT_CONTEXT_TYPE:
           return 'Context.Consumer';
+
         case REACT_PROVIDER_TYPE:
           return 'Context.Provider';
+
         case REACT_FORWARD_REF_TYPE:
           return getWrappedName(type, type.render, 'ForwardRef');
+
         case REACT_MEMO_TYPE:
           return getComponentName(type.type);
+
+        case REACT_BLOCK_TYPE:
+          return getComponentName(type.render);
+
         case REACT_LAZY_TYPE:
           {
             var thenable = type;
             var resolvedThenable = refineResolvedLazyComponent(thenable);
+
             if (resolvedThenable) {
               return getComponentName(resolvedThenable);
             }
+
             break;
           }
       }
     }
+
     return null;
   }
 
   var ReactDebugCurrentFrame = {};
+  var currentlyValidatingElement = null;
+  function setCurrentlyValidatingElement(element) {
+    {
+      currentlyValidatingElement = element;
+    }
+  }
+
+  {
+    // Stack implementation injected by the current renderer.
+    ReactDebugCurrentFrame.getCurrentStack = null;
+
+    ReactDebugCurrentFrame.getStackAddendum = function () {
+      var stack = ''; // Add an extra top frame while an element is being validated
+
+      if (currentlyValidatingElement) {
+        var name = getComponentName(currentlyValidatingElement.type);
+        var owner = currentlyValidatingElement._owner;
+        stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
+      } // Delegate to the injected renderer-specific implementation
+
+
+      var impl = ReactDebugCurrentFrame.getCurrentStack;
+
+      if (impl) {
+        stack += impl() || '';
+      }
+
+      return stack;
+    };
+  }
+
+  /**
+   * Used by act() to track whether you're inside an act() scope.
+   */
+  var IsSomeRendererActing = {
+    current: false
+  };
+
+  var ReactSharedInternals = {
+    ReactCurrentDispatcher: ReactCurrentDispatcher,
+    ReactCurrentBatchConfig: ReactCurrentBatchConfig,
+    ReactCurrentOwner: ReactCurrentOwner,
+    IsSomeRendererActing: IsSomeRendererActing,
+    // Used by renderers to avoid bundling object-assign twice in UMD bundles:
+    assign: _assign
+  };
+
+  {
+    _assign(ReactSharedInternals, {
+      // These should not be included in production.
+      ReactDebugCurrentFrame: ReactDebugCurrentFrame,
+      // Shim for React DOM 16.0.0 which still destructured (but not used) this.
+      // TODO: remove in React 17.0.
+      ReactComponentTreeHook: {}
+    });
+  }
+
+  // by calls to these methods by a Babel plugin.
+  //
+  // In PROD (or in packages without access to React internals),
+  // they are left as they are instead.
+
+  function warn(format) {
+    {
+      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
+        args[_key - 1] = arguments[_key];
+      }
+
+      printWarning('warn', format, args);
+    }
+  }
+  function error(format) {
+    {
+      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
+        args[_key2 - 1] = arguments[_key2];
+      }
+
+      printWarning('error', format, args);
+    }
+  }
+
+  function printWarning(level, format, args) {
+    // When changing this logic, you might want to also
+    // update consoleWithStackDev.www.js as well.
+    {
+      var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;
+
+      if (!hasExistingStack) {
+        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
+        var stack = ReactDebugCurrentFrame.getStackAddendum();
+
+        if (stack !== '') {
+          format += '%s';
+          args = args.concat([stack]);
+        }
+      }
+
+      var argsWithFormat = args.map(function (item) {
+        return '' + item;
+      }); // Careful: RN currently depends on this prefix
+
+      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
+      // breaks IE9: https://github.com/facebook/react/issues/13610
+      // eslint-disable-next-line react-internal/no-production-logging
+
+      Function.prototype.apply.call(console[level], console, argsWithFormat);
+
+      try {
+        // --- Welcome to debugging React ---
+        // This error was thrown as a convenience so that you can use this stack
+        // to find the callsite that caused this warning to fire.
+        var argIndex = 0;
+        var message = 'Warning: ' + format.replace(/%s/g, function () {
+          return args[argIndex++];
+        });
+        throw new Error(message);
+      } catch (x) {}
+    }
+  }
+
+  var didWarnStateUpdateForUnmountedComponent = {};
+
+  function warnNoop(publicInstance, callerName) {
+    {
+      var _constructor = publicInstance.constructor;
+      var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
+      var warningKey = componentName + "." + callerName;
+
+      if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
+        return;
+      }
+
+      error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
+
+      didWarnStateUpdateForUnmountedComponent[warningKey] = true;
+    }
+  }
+  /**
+   * This is the abstract API for an update queue.
+   */
+
+
+  var ReactNoopUpdateQueue = {
+    /**
+     * Checks whether or not this composite component is mounted.
+     * @param {ReactClass} publicInstance The instance we want to test.
+     * @return {boolean} True if mounted, false otherwise.
+     * @protected
+     * @final
+     */
+    isMounted: function (publicInstance) {
+      return false;
+    },
+
+    /**
+     * Forces an update. This should only be invoked when it is known with
+     * certainty that we are **not** in a DOM transaction.
+     *
+     * You may want to call this when you know that some deeper aspect of the
+     * component's state has changed but `setState` was not called.
+     *
+     * This will not invoke `shouldComponentUpdate`, but it will invoke
+     * `componentWillUpdate` and `componentDidUpdate`.
+     *
+     * @param {ReactClass} publicInstance The instance that should rerender.
+     * @param {?function} callback Called after component is updated.
+     * @param {?string} callerName name of the calling function in the public API.
+     * @internal
+     */
+    enqueueForceUpdate: function (publicInstance, callback, callerName) {
+      warnNoop(publicInstance, 'forceUpdate');
+    },
 
-  var currentlyValidatingElement = null;
+    /**
+     * Replaces all of the state. Always use this or `setState` to mutate state.
+     * You should treat `this.state` as immutable.
+     *
+     * There is no guarantee that `this.state` will be immediately updated, so
+     * accessing `this.state` after calling this method may return the old value.
+     *
+     * @param {ReactClass} publicInstance The instance that should rerender.
+     * @param {object} completeState Next state.
+     * @param {?function} callback Called after component is updated.
+     * @param {?string} callerName name of the calling function in the public API.
+     * @internal
+     */
+    enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
+      warnNoop(publicInstance, 'replaceState');
+    },
 
-  function setCurrentlyValidatingElement(element) {
-    {
-      currentlyValidatingElement = element;
+    /**
+     * Sets a subset of the state. This only exists because _pendingState is
+     * internal. This provides a merging strategy that is not available to deep
+     * properties which is confusing. TODO: Expose pendingState or don't use it
+     * during the merge.
+     *
+     * @param {ReactClass} publicInstance The instance that should rerender.
+     * @param {object} partialState Next partial state to be merged with state.
+     * @param {?function} callback Called after component is updated.
+     * @param {?string} Name of the calling function in the public API.
+     * @internal
+     */
+    enqueueSetState: function (publicInstance, partialState, callback, callerName) {
+      warnNoop(publicInstance, 'setState');
     }
-  }
+  };
+
+  var emptyObject = {};
 
   {
-    // Stack implementation injected by the current renderer.
-    ReactDebugCurrentFrame.getCurrentStack = null;
+    Object.freeze(emptyObject);
+  }
+  /**
+   * Base class helpers for the updating state of a component.
+   */
 
-    ReactDebugCurrentFrame.getStackAddendum = function () {
-      var stack = '';
 
-      // Add an extra top frame while an element is being validated
-      if (currentlyValidatingElement) {
-        var name = getComponentName(currentlyValidatingElement.type);
-        var owner = currentlyValidatingElement._owner;
-        stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
-      }
+  function Component(props, context, updater) {
+    this.props = props;
+    this.context = context; // If a component has string refs, we will assign a different object later.
 
-      // Delegate to the injected renderer-specific implementation
-      var impl = ReactDebugCurrentFrame.getCurrentStack;
-      if (impl) {
-        stack += impl() || '';
-      }
+    this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
+    // renderer.
 
-      return stack;
-    };
+    this.updater = updater || ReactNoopUpdateQueue;
   }
 
+  Component.prototype.isReactComponent = {};
   /**
-   * Used by act() to track whether you're inside an act() scope.
+   * Sets a subset of the state. Always use this to mutate
+   * state. You should treat `this.state` as immutable.
+   *
+   * There is no guarantee that `this.state` will be immediately updated, so
+   * accessing `this.state` after calling this method may return the old value.
+   *
+   * There is no guarantee that calls to `setState` will run synchronously,
+   * as they may eventually be batched together.  You can provide an optional
+   * callback that will be executed when the call to setState is actually
+   * completed.
+   *
+   * When a function is provided to setState, it will be called at some point in
+   * the future (not synchronously). It will be called with the up to date
+   * component arguments (state, props, context). These values can be different
+   * from this.* because your function may be called after receiveProps but before
+   * shouldComponentUpdate, and this new state, props, and context will not yet be
+   * assigned to this.
+   *
+   * @param {object|function} partialState Next partial state or function to
+   *        produce next partial state to be merged with current state.
+   * @param {?function} callback Called after state is updated.
+   * @final
+   * @protected
    */
 
-  var IsSomeRendererActing = {
-    current: false
+  Component.prototype.setState = function (partialState, callback) {
+    if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
+      {
+        throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
+      }
+    }
+
+    this.updater.enqueueSetState(this, partialState, callback, 'setState');
   };
+  /**
+   * Forces an update. This should only be invoked when it is known with
+   * certainty that we are **not** in a DOM transaction.
+   *
+   * You may want to call this when you know that some deeper aspect of the
+   * component's state has changed but `setState` was not called.
+   *
+   * This will not invoke `shouldComponentUpdate`, but it will invoke
+   * `componentWillUpdate` and `componentDidUpdate`.
+   *
+   * @param {?function} callback Called after update is complete.
+   * @final
+   * @protected
+   */
 
-  var ReactSharedInternals = {
-    ReactCurrentDispatcher: ReactCurrentDispatcher,
-    ReactCurrentBatchConfig: ReactCurrentBatchConfig,
-    ReactCurrentOwner: ReactCurrentOwner,
-    IsSomeRendererActing: IsSomeRendererActing,
-    // Used by renderers to avoid bundling object-assign twice in UMD bundles:
-    assign: _assign
+
+  Component.prototype.forceUpdate = function (callback) {
+    this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
   };
+  /**
+   * Deprecated APIs. These APIs used to exist on classic React classes but since
+   * we would like to deprecate them, we're not going to move them over to this
+   * modern base class. Instead, we define a getter that warns if it's accessed.
+   */
+
 
   {
-    _assign(ReactSharedInternals, {
-      // These should not be included in production.
-      ReactDebugCurrentFrame: ReactDebugCurrentFrame,
-      // Shim for React DOM 16.0.0 which still destructured (but not used) this.
-      // TODO: remove in React 17.0.
-      ReactComponentTreeHook: {}
-    });
+    var deprecatedAPIs = {
+      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
+      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
+    };
+
+    var defineDeprecationWarning = function (methodName, info) {
+      Object.defineProperty(Component.prototype, methodName, {
+        get: function () {
+          warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
+
+          return undefined;
+        }
+      });
+    };
+
+    for (var fnName in deprecatedAPIs) {
+      if (deprecatedAPIs.hasOwnProperty(fnName)) {
+        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
+      }
+    }
   }
 
+  function ComponentDummy() {}
+
+  ComponentDummy.prototype = Component.prototype;
   /**
-   * Similar to invariant but only logs a warning if the condition is not met.
-   * This can be used to log issues in development environments in critical
-   * paths. Removing the logging code for production environments will keep the
-   * same logic and follow the same code paths.
+   * Convenience component with default shallow equality check for sCU.
    */
 
-  var warning = warningWithoutStack$1;
+  function PureComponent(props, context, updater) {
+    this.props = props;
+    this.context = context; // If a component has string refs, we will assign a different object later.
 
-  {
-    warning = function (condition, format) {
-      if (condition) {
-        return;
-      }
-      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
-      var stack = ReactDebugCurrentFrame.getStackAddendum();
-      // eslint-disable-next-line react-internal/warning-and-invariant-args
+    this.refs = emptyObject;
+    this.updater = updater || ReactNoopUpdateQueue;
+  }
 
-      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
-        args[_key - 2] = arguments[_key];
-      }
+  var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
+  pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
+
+  _assign(pureComponentPrototype, Component.prototype);
 
-      warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
+  pureComponentPrototype.isPureReactComponent = true;
+
+  // an immutable object with a single mutable value
+  function createRef() {
+    var refObject = {
+      current: null
     };
-  }
 
-  var warning$1 = warning;
+    {
+      Object.seal(refObject);
+    }
 
-  var hasOwnProperty = Object.prototype.hasOwnProperty;
+    return refObject;
+  }
 
+  var hasOwnProperty = Object.prototype.hasOwnProperty;
   var RESERVED_PROPS = {
     key: true,
     ref: true,
     __self: true,
     __source: true
   };
+  var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
 
-  var specialPropKeyWarningShown = void 0;
-  var specialPropRefWarningShown = void 0;
+  {
+    didWarnAboutStringRefs = {};
+  }
 
   function hasValidRef(config) {
     {
       if (hasOwnProperty.call(config, 'ref')) {
         var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
+
         if (getter && getter.isReactWarning) {
           return false;
         }
       }
     }
+
     return config.ref !== undefined;
   }
 
@@ -943,21 +916,27 @@
     {
       if (hasOwnProperty.call(config, 'key')) {
         var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
+
         if (getter && getter.isReactWarning) {
           return false;
         }
       }
     }
+
     return config.key !== undefined;
   }
 
   function defineKeyPropWarningGetter(props, displayName) {
     var warnAboutAccessingKey = function () {
-      if (!specialPropKeyWarningShown) {
-        specialPropKeyWarningShown = true;
-        warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
+      {
+        if (!specialPropKeyWarningShown) {
+          specialPropKeyWarningShown = true;
+
+          error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
+        }
       }
     };
+
     warnAboutAccessingKey.isReactWarning = true;
     Object.defineProperty(props, 'key', {
       get: warnAboutAccessingKey,
@@ -967,11 +946,15 @@
 
   function defineRefPropWarningGetter(props, displayName) {
     var warnAboutAccessingRef = function () {
-      if (!specialPropRefWarningShown) {
-        specialPropRefWarningShown = true;
-        warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
+      {
+        if (!specialPropRefWarningShown) {
+          specialPropRefWarningShown = true;
+
+          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
+        }
       }
     };
+
     warnAboutAccessingRef.isReactWarning = true;
     Object.defineProperty(props, 'ref', {
       get: warnAboutAccessingRef,
@@ -979,10 +962,23 @@
     });
   }
 
+  function warnIfStringRefCannotBeAutoConverted(config) {
+    {
+      if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
+        var componentName = getComponentName(ReactCurrentOwner.current.type);
+
+        if (!didWarnAboutStringRefs[componentName]) {
+          error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
+
+          didWarnAboutStringRefs[componentName] = true;
+        }
+      }
+    }
+  }
   /**
    * Factory method to create a new React element. This no longer adheres to
-   * the class pattern, so do not use new to call it. Also, no instanceof check
-   * will work. Instead test $$typeof field against Symbol.for('react.element') to check
+   * the class pattern, so do not use new to call it. Also, instanceof check
+   * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
    * if something is a React Element.
    *
    * @param {*} type
@@ -999,17 +995,17 @@
    * indicating filename, line number, and/or other information.
    * @internal
    */
+
+
   var ReactElement = function (type, key, ref, self, source, owner, props) {
     var element = {
       // This tag allows us to uniquely identify this as a React Element
       $$typeof: REACT_ELEMENT_TYPE,
-
       // Built-in properties that belong on the element
       type: type,
       key: key,
       ref: ref,
       props: props,
-
       // Record the component responsible for creating this element.
       _owner: owner
     };
@@ -1019,33 +1015,33 @@
       // an external backing store so that we can freeze the whole object.
       // This can be replaced with a WeakMap once they are implemented in
       // commonly used development environments.
-      element._store = {};
-
-      // To make comparing ReactElements easier for testing purposes, we make
+      element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
       // the validation flag non-enumerable (where possible, which should
       // include every environment we run tests in), so the test framework
       // ignores it.
+
       Object.defineProperty(element._store, 'validated', {
         configurable: false,
         enumerable: false,
         writable: true,
         value: false
-      });
-      // self and source are DEV only properties.
+      }); // self and source are DEV only properties.
+
       Object.defineProperty(element, '_self', {
         configurable: false,
         enumerable: false,
         writable: false,
         value: self
-      });
-      // Two elements created in two different places should be considered
+      }); // Two elements created in two different places should be considered
       // equal for testing purposes and therefore we hide it from enumeration.
+
       Object.defineProperty(element, '_source', {
         configurable: false,
         enumerable: false,
         writable: false,
         value: source
       });
+
       if (Object.freeze) {
         Object.freeze(element.props);
         Object.freeze(element);
@@ -1054,17 +1050,15 @@
 
     return element;
   };
-
   /**
    * Create and return a new ReactElement of the given type.
    * See https://reactjs.org/docs/react-api.html#createelement
    */
+
   function createElement(type, config, children) {
-    var propName = void 0;
+    var propName; // Reserved names are extracted
 
-    // Reserved names are extracted
     var props = {};
-
     var key = null;
     var ref = null;
     var self = null;
@@ -1073,103 +1067,105 @@
     if (config != null) {
       if (hasValidRef(config)) {
         ref = config.ref;
+
+        {
+          warnIfStringRefCannotBeAutoConverted(config);
+        }
       }
+
       if (hasValidKey(config)) {
         key = '' + config.key;
       }
 
       self = config.__self === undefined ? null : config.__self;
-      source = config.__source === undefined ? null : config.__source;
-      // Remaining properties are added to a new props object
+      source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
+
       for (propName in config) {
         if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
           props[propName] = config[propName];
         }
       }
-    }
-
-    // Children can be more than one argument, and those are transferred onto
+    } // Children can be more than one argument, and those are transferred onto
     // the newly allocated props object.
+
+
     var childrenLength = arguments.length - 2;
+
     if (childrenLength === 1) {
       props.children = children;
     } else if (childrenLength > 1) {
       var childArray = Array(childrenLength);
+
       for (var i = 0; i < childrenLength; i++) {
         childArray[i] = arguments[i + 2];
       }
+
       {
         if (Object.freeze) {
           Object.freeze(childArray);
         }
       }
+
       props.children = childArray;
-    }
+    } // Resolve default props
+
 
-    // Resolve default props
     if (type && type.defaultProps) {
       var defaultProps = type.defaultProps;
+
       for (propName in defaultProps) {
         if (props[propName] === undefined) {
           props[propName] = defaultProps[propName];
         }
       }
     }
+
     {
       if (key || ref) {
         var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
+
         if (key) {
           defineKeyPropWarningGetter(props, displayName);
         }
+
         if (ref) {
           defineRefPropWarningGetter(props, displayName);
         }
-      }
-    }
-    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
-  }
-
-  /**
-   * Return a function that produces ReactElements of a given type.
-   * See https://reactjs.org/docs/react-api.html#createfactory
-   */
-
+      }
+    }
 
+    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
+  }
   function cloneAndReplaceKey(oldElement, newKey) {
     var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
-
     return newElement;
   }
-
   /**
    * Clone and return a new ReactElement using element as the starting point.
    * See https://reactjs.org/docs/react-api.html#cloneelement
    */
+
   function cloneElement(element, config, children) {
-    (function () {
-      if (!!(element === null || element === undefined)) {
-        {
-          throw ReactError(Error('React.cloneElement(...): The argument must be a React element, but you passed ' + element + '.'));
-        }
+    if (!!(element === null || element === undefined)) {
+      {
+        throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
       }
-    })();
+    }
 
-    var propName = void 0;
+    var propName; // Original props are copied
+
+    var props = _assign({}, element.props); // Reserved names are extracted
 
-    // Original props are copied
-    var props = _assign({}, element.props);
 
-    // Reserved names are extracted
     var key = element.key;
-    var ref = element.ref;
-    // Self is preserved since the owner is preserved.
-    var self = element._self;
-    // Source is preserved since cloneElement is unlikely to be targeted by a
+    var ref = element.ref; // Self is preserved since the owner is preserved.
+
+    var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
     // transpiler, and the original source is probably a better indicator of the
     // true owner.
-    var source = element._source;
 
-    // Owner will be preserved, unless ref is overridden
+    var source = element._source; // Owner will be preserved, unless ref is overridden
+
     var owner = element._owner;
 
     if (config != null) {
@@ -1178,15 +1174,18 @@
         ref = config.ref;
         owner = ReactCurrentOwner.current;
       }
+
       if (hasValidKey(config)) {
         key = '' + config.key;
-      }
+      } // Remaining properties override existing props
+
+
+      var defaultProps;
 
-      // Remaining properties override existing props
-      var defaultProps = void 0;
       if (element.type && element.type.defaultProps) {
         defaultProps = element.type.defaultProps;
       }
+
       for (propName in config) {
         if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
           if (config[propName] === undefined && defaultProps !== undefined) {
@@ -1197,24 +1196,26 @@
           }
         }
       }
-    }
-
-    // Children can be more than one argument, and those are transferred onto
+    } // Children can be more than one argument, and those are transferred onto
     // the newly allocated props object.
+
+
     var childrenLength = arguments.length - 2;
+
     if (childrenLength === 1) {
       props.children = children;
     } else if (childrenLength > 1) {
       var childArray = Array(childrenLength);
+
       for (var i = 0; i < childrenLength; i++) {
         childArray[i] = arguments[i + 2];
       }
+
       props.children = childArray;
     }
 
     return ReactElement(element.type, key, ref, self, source, owner, props);
   }
-
   /**
    * Verifies the object is a ReactElement.
    * See https://reactjs.org/docs/react-api.html#isvalidelement
@@ -1222,19 +1223,20 @@
    * @return {boolean} True if `object` is a ReactElement.
    * @final
    */
+
   function isValidElement(object) {
     return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
   }
 
   var SEPARATOR = '.';
   var SUBSEPARATOR = ':';
-
   /**
    * Escape and wrap key so it is safe to use as a reactid
    *
    * @param {string} key to be escaped.
    * @return {string} the escaped key.
    */
+
   function escape(key) {
     var escapeRegex = /[=:]/g;
     var escaperLookup = {
@@ -1244,24 +1246,24 @@
     var escapedString = ('' + key).replace(escapeRegex, function (match) {
       return escaperLookup[match];
     });
-
     return '$' + escapedString;
   }
-
   /**
    * TODO: Test that a single child and an array with one item have the same key
    * pattern.
    */
 
-  var didWarnAboutMaps = false;
 
+  var didWarnAboutMaps = false;
   var userProvidedKeyEscapeRegex = /\/+/g;
+
   function escapeUserProvidedKey(text) {
     return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
   }
 
   var POOL_SIZE = 10;
   var traverseContextPool = [];
+
   function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
     if (traverseContextPool.length) {
       var traverseContext = traverseContextPool.pop();
@@ -1288,11 +1290,11 @@
     traverseContext.func = null;
     traverseContext.context = null;
     traverseContext.count = 0;
+
     if (traverseContextPool.length < POOL_SIZE) {
       traverseContextPool.push(traverseContext);
     }
   }
-
   /**
    * @param {?*} children Children tree container.
    * @param {!string} nameSoFar Name of the key path so far.
@@ -1301,6 +1303,8 @@
    * process.
    * @return {!number} The number of children in this subtree.
    */
+
+
   function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
     var type = typeof children;
 
@@ -1319,26 +1323,28 @@
         case 'number':
           invokeCallback = true;
           break;
+
         case 'object':
           switch (children.$$typeof) {
             case REACT_ELEMENT_TYPE:
             case REACT_PORTAL_TYPE:
               invokeCallback = true;
           }
+
       }
     }
 
     if (invokeCallback) {
-      callback(traverseContext, children,
-      // If it's the only child, treat the name as if it was wrapped in an array
+      callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
       // so that it's consistent if the number of children grows.
       nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
       return 1;
     }
 
-    var child = void 0;
-    var nextName = void 0;
+    var child;
+    var nextName;
     var subtreeCount = 0; // Count of children found in the current subtree.
+
     var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
 
     if (Array.isArray(children)) {
@@ -1349,18 +1355,24 @@
       }
     } else {
       var iteratorFn = getIteratorFn(children);
+
       if (typeof iteratorFn === 'function') {
+
         {
           // Warn about using Maps as children
           if (iteratorFn === children.entries) {
-            !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
+            if (!didWarnAboutMaps) {
+              warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
+            }
+
             didWarnAboutMaps = true;
           }
         }
 
         var iterator = iteratorFn.call(children);
-        var step = void 0;
+        var step;
         var ii = 0;
+
         while (!(step = iterator.next()).done) {
           child = step.value;
           nextName = nextNamePrefix + getComponentKey(child, ii++);
@@ -1368,23 +1380,23 @@
         }
       } else if (type === 'object') {
         var addendum = '';
+
         {
           addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
         }
+
         var childrenString = '' + children;
-        (function () {
+
+        {
           {
-            {
-              throw ReactError(Error('Objects are not valid as a React child (found: ' + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ').' + addendum));
-            }
+            throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
           }
-        })();
+        }
       }
     }
 
     return subtreeCount;
   }
-
   /**
    * Traverses children that are typically specified as `props.children`, but
    * might also be specified through attributes:
@@ -1401,6 +1413,8 @@
    * @param {?*} traverseContext Context for traversal.
    * @return {!number} The number of children in this subtree.
    */
+
+
   function traverseAllChildren(children, callback, traverseContext) {
     if (children == null) {
       return 0;
@@ -1408,7 +1422,6 @@
 
     return traverseAllChildrenImpl(children, '', callback, traverseContext);
   }
-
   /**
    * Generate a key string that identifies a component within a set.
    *
@@ -1416,24 +1429,25 @@
    * @param {number} index Index that is used if a manual key is not provided.
    * @return {string}
    */
+
+
   function getComponentKey(component, index) {
     // Do some typechecking here since we call this blindly. We want to ensure
     // that we don't block potential future ES APIs.
     if (typeof component === 'object' && component !== null && component.key != null) {
       // Explicit key
       return escape(component.key);
-    }
-    // Implicit key determined by the index in the set
+    } // Implicit key determined by the index in the set
+
+
     return index.toString(36);
   }
 
   function forEachSingleChild(bookKeeping, child, name) {
     var func = bookKeeping.func,
         context = bookKeeping.context;
-
     func.call(context, child, bookKeeping.count++);
   }
-
   /**
    * Iterates through children that are typically specified as `props.children`.
    *
@@ -1446,10 +1460,13 @@
    * @param {function(*, int)} forEachFunc
    * @param {*} forEachContext Context for forEachContext.
    */
+
+
   function forEachChildren(children, forEachFunc, forEachContext) {
     if (children == null) {
       return children;
     }
+
     var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
     traverseAllChildren(children, forEachSingleChild, traverseContext);
     releaseTraverseContext(traverseContext);
@@ -1460,34 +1477,34 @@
         keyPrefix = bookKeeping.keyPrefix,
         func = bookKeeping.func,
         context = bookKeeping.context;
-
-
     var mappedChild = func.call(context, child, bookKeeping.count++);
+
     if (Array.isArray(mappedChild)) {
       mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
         return c;
       });
     } else if (mappedChild != null) {
       if (isValidElement(mappedChild)) {
-        mappedChild = cloneAndReplaceKey(mappedChild,
-        // Keep both the (mapped) and old keys if they differ, just as
+        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
         // traverseAllChildren used to do for objects as children
         keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
       }
+
       result.push(mappedChild);
     }
   }
 
   function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
     var escapedPrefix = '';
+
     if (prefix != null) {
       escapedPrefix = escapeUserProvidedKey(prefix) + '/';
     }
+
     var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
     traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
     releaseTraverseContext(traverseContext);
   }
-
   /**
    * Maps children that are typically specified as `props.children`.
    *
@@ -1501,15 +1518,17 @@
    * @param {*} context Context for mapFunction.
    * @return {object} Object containing the ordered map of results.
    */
+
+
   function mapChildren(children, func, context) {
     if (children == null) {
       return children;
     }
+
     var result = [];
     mapIntoWithKeyPrefixInternal(children, result, null, func, context);
     return result;
   }
-
   /**
    * Count the number of children that are typically specified as
    * `props.children`.
@@ -1519,18 +1538,21 @@
    * @param {?*} children Children tree container.
    * @return {number} The number of children.
    */
+
+
   function countChildren(children) {
     return traverseAllChildren(children, function () {
       return null;
     }, null);
   }
-
   /**
    * Flatten a children object (typically specified as `props.children`) and
    * return an array with appropriately re-keyed children.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
    */
+
+
   function toArray(children) {
     var result = [];
     mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
@@ -1538,7 +1560,6 @@
     });
     return result;
   }
-
   /**
    * Returns the first child in a collection of children and verifies that there
    * is only one child in the collection.
@@ -1553,14 +1574,15 @@
    * @return {ReactElement} The first and only `ReactElement` contained in the
    * structure.
    */
+
+
   function onlyChild(children) {
-    (function () {
-      if (!isValidElement(children)) {
-        {
-          throw ReactError(Error('React.Children.only expected to receive a single React element child.'));
-        }
+    if (!isValidElement(children)) {
+      {
+        throw Error( "React.Children.only expected to receive a single React element child." );
       }
-    })();
+    }
+
     return children;
   }
 
@@ -1569,7 +1591,9 @@
       calculateChangedBits = null;
     } else {
       {
-        !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
+        if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
+          error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
+        }
       }
     }
 
@@ -1590,12 +1614,10 @@
       Provider: null,
       Consumer: null
     };
-
     context.Provider = {
       $$typeof: REACT_PROVIDER_TYPE,
       _context: context
     };
-
     var hasWarnedAboutUsingNestedContextConsumers = false;
     var hasWarnedAboutUsingConsumerProvider = false;
 
@@ -1607,15 +1629,17 @@
         $$typeof: REACT_CONTEXT_TYPE,
         _context: context,
         _calculateChangedBits: context._calculateChangedBits
-      };
-      // $FlowFixMe: Flow complains about not setting a value, which is intentional here
+      }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
+
       Object.defineProperties(Consumer, {
         Provider: {
           get: function () {
             if (!hasWarnedAboutUsingConsumerProvider) {
               hasWarnedAboutUsingConsumerProvider = true;
-              warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
+
+              error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
             }
+
             return context.Provider;
           },
           set: function (_Provider) {
@@ -1650,13 +1674,15 @@
           get: function () {
             if (!hasWarnedAboutUsingNestedContextConsumers) {
               hasWarnedAboutUsingNestedContextConsumers = true;
-              warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
+
+              error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
             }
+
             return context.Consumer;
           }
         }
-      });
-      // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
+      }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
+
       context.Consumer = Consumer;
     }
 
@@ -1679,8 +1705,8 @@
 
     {
       // In production, this would just set it on the object.
-      var defaultProps = void 0;
-      var propTypes = void 0;
+      var defaultProps;
+      var propTypes;
       Object.defineProperties(lazyType, {
         defaultProps: {
           configurable: true,
@@ -1688,9 +1714,10 @@
             return defaultProps;
           },
           set: function (newDefaultProps) {
-            warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
-            defaultProps = newDefaultProps;
-            // Match production behavior more closely:
+            error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
+
+            defaultProps = newDefaultProps; // Match production behavior more closely:
+
             Object.defineProperty(lazyType, 'defaultProps', {
               enumerable: true
             });
@@ -1702,9 +1729,10 @@
             return propTypes;
           },
           set: function (newPropTypes) {
-            warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
-            propTypes = newPropTypes;
-            // Match production behavior more closely:
+            error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
+
+            propTypes = newPropTypes; // Match production behavior more closely:
+
             Object.defineProperty(lazyType, 'propTypes', {
               enumerable: true
             });
@@ -1719,17 +1747,19 @@
   function forwardRef(render) {
     {
       if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
-        warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
+        error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
       } else if (typeof render !== 'function') {
-        warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
+        error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
       } else {
-        !(
-        // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
-        render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
+        if (render.length !== 0 && render.length !== 2) {
+          error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
+        }
       }
 
       if (render != null) {
-        !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
+        if (render.defaultProps != null || render.propTypes != null) {
+          error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
+        }
       }
     }
 
@@ -1740,17 +1770,17 @@
   }
 
   function isValidElementType(type) {
-    return typeof type === 'string' || typeof type === 'function' ||
-    // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
-    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE);
+    return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
+    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
   }
 
   function memo(type, compare) {
     {
       if (!isValidElementType(type)) {
-        warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
+        error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
       }
     }
+
     return {
       $$typeof: REACT_MEMO_TYPE,
       type: type,
@@ -1760,76 +1790,71 @@
 
   function resolveDispatcher() {
     var dispatcher = ReactCurrentDispatcher.current;
-    (function () {
-      if (!(dispatcher !== null)) {
-        {
-          throw ReactError(Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.'));
-        }
+
+    if (!(dispatcher !== null)) {
+      {
+        throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
       }
-    })();
+    }
+
     return dispatcher;
   }
 
   function useContext(Context, unstable_observedBits) {
     var dispatcher = resolveDispatcher();
+
     {
-      !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0;
+      if (unstable_observedBits !== undefined) {
+        error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
+      } // TODO: add a more generic warning for invalid values.
+
 
-      // TODO: add a more generic warning for invalid values.
       if (Context._context !== undefined) {
-        var realContext = Context._context;
-        // Don't deduplicate because this legitimately causes bugs
+        var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
         // and nobody should be using this in existing code.
+
         if (realContext.Consumer === Context) {
-          warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
+          error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
         } else if (realContext.Provider === Context) {
-          warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
+          error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
         }
       }
     }
+
     return dispatcher.useContext(Context, unstable_observedBits);
   }
-
   function useState(initialState) {
     var dispatcher = resolveDispatcher();
     return dispatcher.useState(initialState);
   }
-
   function useReducer(reducer, initialArg, init) {
     var dispatcher = resolveDispatcher();
     return dispatcher.useReducer(reducer, initialArg, init);
   }
-
   function useRef(initialValue) {
     var dispatcher = resolveDispatcher();
     return dispatcher.useRef(initialValue);
   }
-
-  function useEffect(create, inputs) {
+  function useEffect(create, deps) {
     var dispatcher = resolveDispatcher();
-    return dispatcher.useEffect(create, inputs);
+    return dispatcher.useEffect(create, deps);
   }
-
-  function useLayoutEffect(create, inputs) {
+  function useLayoutEffect(create, deps) {
     var dispatcher = resolveDispatcher();
-    return dispatcher.useLayoutEffect(create, inputs);
+    return dispatcher.useLayoutEffect(create, deps);
   }
-
-  function useCallback(callback, inputs) {
+  function useCallback(callback, deps) {
     var dispatcher = resolveDispatcher();
-    return dispatcher.useCallback(callback, inputs);
+    return dispatcher.useCallback(callback, deps);
   }
-
-  function useMemo(create, inputs) {
+  function useMemo(create, deps) {
     var dispatcher = resolveDispatcher();
-    return dispatcher.useMemo(create, inputs);
+    return dispatcher.useMemo(create, deps);
   }
-
-  function useImperativeHandle(ref, create, inputs) {
+  function useImperativeHandle(ref, create, deps) {
     var dispatcher = resolveDispatcher();
-    return dispatcher.useImperativeHandle(ref, create, inputs);
+    return dispatcher.useImperativeHandle(ref, create, deps);
   }
-
   function useDebugValue(value, formatterFn) {
     {
       var dispatcher = resolveDispatcher();
@@ -1837,25 +1862,7 @@
     }
   }
 
-  // Within the scope of the callback, mark all updates as being allowed to suspend.
-  function withSuspenseConfig(scope, config) {
-    var previousConfig = ReactCurrentBatchConfig.suspense;
-    ReactCurrentBatchConfig.suspense = config === undefined ? null : config;
-    try {
-      scope();
-    } finally {
-      ReactCurrentBatchConfig.suspense = previousConfig;
-    }
-  }
-
-  /**
-   * ReactElementValidator provides a wrapper around a element factory
-   * which validates the props passed to the element. This is intended to be
-   * used only in DEV and could be replaced by a static type checker for languages
-   * that support it.
-   */
-
-  var propTypesMisspellWarningShown = void 0;
+  var propTypesMisspellWarningShown;
 
   {
     propTypesMisspellWarningShown = false;
@@ -1864,10 +1871,12 @@
   function getDeclarationErrorAddendum() {
     if (ReactCurrentOwner.current) {
       var name = getComponentName(ReactCurrentOwner.current.type);
+
       if (name) {
         return '\n\nCheck the render method of `' + name + '`.';
       }
     }
+
     return '';
   }
 
@@ -1877,6 +1886,7 @@
       var lineNumber = source.lineNumber;
       return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
     }
+
     return '';
   }
 
@@ -1884,14 +1894,16 @@
     if (elementProps !== null && elementProps !== undefined) {
       return getSourceInfoErrorAddendum(elementProps.__source);
     }
+
     return '';
   }
-
   /**
    * Warn if there's no key explicitly set on dynamic arrays of children or
    * object keys are not valid. This allows us to keep track of children between
    * updates.
    */
+
+
   var ownerHasKeyUseWarning = {};
 
   function getCurrentComponentErrorInfo(parentType) {
@@ -1899,13 +1911,14 @@
 
     if (!info) {
       var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
+
       if (parentName) {
-        info = '\n\nCheck the top-level render call using <' + parentName + '>.';
+        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
       }
     }
+
     return info;
   }
-
   /**
    * Warn if the element doesn't have an explicit key assigned to it.
    * This element is in an array. The array could grow and shrink or be
@@ -1917,34 +1930,39 @@
    * @param {ReactElement} element Element that requires a key.
    * @param {*} parentType element's parent's type.
    */
+
+
   function validateExplicitKey(element, parentType) {
     if (!element._store || element._store.validated || element.key != null) {
       return;
     }
-    element._store.validated = true;
 
+    element._store.validated = true;
     var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
+
     if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
       return;
     }
-    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
 
-    // Usually the current owner is the offender, but if it accepts children as a
+    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
     // property, it may be the creator of the child that's responsible for
     // assigning it a key.
+
     var childOwner = '';
+
     if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
       // Give the component that originally created this child.
-      childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
+      childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
     }
 
     setCurrentlyValidatingElement(element);
+
     {
-      warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
+      error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
     }
+
     setCurrentlyValidatingElement(null);
   }
-
   /**
    * Ensure that every element either is passed in a static location, in an
    * array with an explicit keys property defined, or in an object literal
@@ -1954,13 +1972,17 @@
    * @param {ReactNode} node Statically passed child of any type.
    * @param {*} parentType node's parent's type.
    */
+
+
   function validateChildKeys(node, parentType) {
     if (typeof node !== 'object') {
       return;
     }
+
     if (Array.isArray(node)) {
       for (var i = 0; i < node.length; i++) {
         var child = node[i];
+
         if (isValidElement(child)) {
           validateExplicitKey(child, parentType);
         }
@@ -1972,12 +1994,14 @@
       }
     } else if (node) {
       var iteratorFn = getIteratorFn(node);
+
       if (typeof iteratorFn === 'function') {
         // Entry iterators used to provide implicit keys,
         // but now we print a separate warning for them later.
         if (iteratorFn !== node.entries) {
           var iterator = iteratorFn.call(node);
-          var step = void 0;
+          var step;
+
           while (!(step = iterator.next()).done) {
             if (isValidElement(step.value)) {
               validateExplicitKey(step.value, parentType);
@@ -1987,112 +2011,127 @@
       }
     }
   }
-
   /**
    * Given an element, validate that its props follow the propTypes definition,
    * provided by the type.
    *
    * @param {ReactElement} element
    */
+
+
   function validatePropTypes(element) {
-    var type = element.type;
-    if (type === null || type === undefined || typeof type === 'string') {
-      return;
-    }
-    var name = getComponentName(type);
-    var propTypes = void 0;
-    if (typeof type === 'function') {
-      propTypes = type.propTypes;
-    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
-    // Note: Memo only checks outer props here.
-    // Inner props are checked in the reconciler.
-    type.$$typeof === REACT_MEMO_TYPE)) {
-      propTypes = type.propTypes;
-    } else {
-      return;
-    }
-    if (propTypes) {
-      setCurrentlyValidatingElement(element);
-      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
-      setCurrentlyValidatingElement(null);
-    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
-      propTypesMisspellWarningShown = true;
-      warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
-    }
-    if (typeof type.getDefaultProps === 'function') {
-      !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
+    {
+      var type = element.type;
+
+      if (type === null || type === undefined || typeof type === 'string') {
+        return;
+      }
+
+      var name = getComponentName(type);
+      var propTypes;
+
+      if (typeof type === 'function') {
+        propTypes = type.propTypes;
+      } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
+      // Inner props are checked in the reconciler.
+      type.$$typeof === REACT_MEMO_TYPE)) {
+        propTypes = type.propTypes;
+      } else {
+        return;
+      }
+
+      if (propTypes) {
+        setCurrentlyValidatingElement(element);
+        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
+        setCurrentlyValidatingElement(null);
+      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
+        propTypesMisspellWarningShown = true;
+
+        error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
+      }
+
+      if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
+        error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
+      }
     }
   }
-
   /**
    * Given a fragment, validate that it can only be provided with fragment props
    * @param {ReactElement} fragment
    */
+
+
   function validateFragmentProps(fragment) {
-    setCurrentlyValidatingElement(fragment);
+    {
+      setCurrentlyValidatingElement(fragment);
+      var keys = Object.keys(fragment.props);
+
+      for (var i = 0; i < keys.length; i++) {
+        var key = keys[i];
+
+        if (key !== 'children' && key !== 'key') {
+          error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
+
+          break;
+        }
+      }
 
-    var keys = Object.keys(fragment.props);
-    for (var i = 0; i < keys.length; i++) {
-      var key = keys[i];
-      if (key !== 'children' && key !== 'key') {
-        warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
-        break;
+      if (fragment.ref !== null) {
+        error('Invalid attribute `ref` supplied to `React.Fragment`.');
       }
-    }
 
-    if (fragment.ref !== null) {
-      warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
+      setCurrentlyValidatingElement(null);
     }
-
-    setCurrentlyValidatingElement(null);
   }
-
   function createElementWithValidation(type, props, children) {
-    var validType = isValidElementType(type);
-
-    // We warn in this case but don't throw. We expect the element creation to
+    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
     // succeed and there will likely be errors in render.
+
     if (!validType) {
       var info = '';
+
       if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
         info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
       }
 
       var sourceInfo = getSourceInfoErrorAddendumForProps(props);
+
       if (sourceInfo) {
         info += sourceInfo;
       } else {
         info += getDeclarationErrorAddendum();
       }
 
-      var typeString = void 0;
+      var typeString;
+
       if (type === null) {
         typeString = 'null';
       } else if (Array.isArray(type)) {
         typeString = 'array';
       } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
-        typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
+        typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
         info = ' Did you accidentally export a JSX literal instead of a component?';
       } else {
         typeString = typeof type;
       }
 
-      warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
+      {
+        error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
+      }
     }
 
-    var element = createElement.apply(this, arguments);
-
-    // The result can be nullish if a mock or a custom function is used.
+    var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
     // TODO: Drop this when these are no longer allowed as the type argument.
+
     if (element == null) {
       return element;
-    }
-
-    // Skip key warning if the type isn't valid since our key validation logic
+    } // Skip key warning if the type isn't valid since our key validation logic
     // doesn't expect a non-string/function type and can throw confusing errors.
     // We don't want exception behavior to differ between dev and prod.
     // (Rendering will throw with a helpful message and as soon as the type is
     // fixed, the key warnings will appear.)
+
+
     if (validType) {
       for (var i = 2; i < arguments.length; i++) {
         validateChildKeys(arguments[i], type);
@@ -2107,16 +2146,24 @@
 
     return element;
   }
-
+  var didWarnAboutDeprecatedCreateFactory = false;
   function createFactoryWithValidation(type) {
     var validatedFactory = createElementWithValidation.bind(null, type);
     validatedFactory.type = type;
-    // Legacy hook: remove it
+
     {
+      if (!didWarnAboutDeprecatedCreateFactory) {
+        didWarnAboutDeprecatedCreateFactory = true;
+
+        warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
+      } // Legacy hook: remove it
+
+
       Object.defineProperty(validatedFactory, 'type', {
         enumerable: false,
         get: function () {
-          lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
+          warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
+
           Object.defineProperty(this, 'type', {
             value: type
           });
@@ -2127,117 +2174,102 @@
 
     return validatedFactory;
   }
-
   function cloneElementWithValidation(element, props, children) {
     var newElement = cloneElement.apply(this, arguments);
+
     for (var i = 2; i < arguments.length; i++) {
       validateChildKeys(arguments[i], newElement.type);
     }
+
     validatePropTypes(newElement);
     return newElement;
   }
 
   {
+
     try {
       var frozenObject = Object.freeze({});
       var testMap = new Map([[frozenObject, null]]);
-      var testSet = new Set([frozenObject]);
-      // This is necessary for Rollup to not consider these unused.
+      var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
       // https://github.com/rollup/rollup/issues/1771
       // TODO: we can remove these if Rollup fixes the bug.
+
       testMap.set(0, 0);
       testSet.add(0);
     } catch (e) {
     }
   }
 
-  // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
-  // Till then, we warn about the missing mock, but still fallback to a sync mode compatible version
-
-  // Temporary flag to revert the fix in #15650
-
-
-  // For tests, we flush suspense fallbacks in an act scope;
-  // *except* in some of our own tests, where we test incremental loading states.
-
-
-  // Changes priority of some events like mousemove to user-blocking priority,
-  // but without making them discrete. The flag exists in case it causes
-  // starvation problems.
-
-
-  // Add a callback property to suspense to notify which promises are currently
-  // in the update queue. This allows reporting and tracing of what is causing
-  // the user to see a loading state.
-
-
-  // Part of the simplification of React.createElement so we can eventually move
-  // from React.createElement to React.jsx
-  // https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md
-
-  var React = {
-    Children: {
-      map: mapChildren,
-      forEach: forEachChildren,
-      count: countChildren,
-      toArray: toArray,
-      only: onlyChild
-    },
-
-    createRef: createRef,
-    Component: Component,
-    PureComponent: PureComponent,
-
-    createContext: createContext,
-    forwardRef: forwardRef,
-    lazy: lazy,
-    memo: memo,
-
-    useCallback: useCallback,
-    useContext: useContext,
-    useEffect: useEffect,
-    useImperativeHandle: useImperativeHandle,
-    useDebugValue: useDebugValue,
-    useLayoutEffect: useLayoutEffect,
-    useMemo: useMemo,
-    useReducer: useReducer,
-    useRef: useRef,
-    useState: useState,
-
-    Fragment: REACT_FRAGMENT_TYPE,
-    Profiler: REACT_PROFILER_TYPE,
-    StrictMode: REACT_STRICT_MODE_TYPE,
-    Suspense: REACT_SUSPENSE_TYPE,
-    unstable_SuspenseList: REACT_SUSPENSE_LIST_TYPE,
-
-    createElement: createElementWithValidation,
-    cloneElement: cloneElementWithValidation,
-    createFactory: createFactoryWithValidation,
-    isValidElement: isValidElement,
-
-    version: ReactVersion,
-
-    unstable_withSuspenseConfig: withSuspenseConfig,
-
-    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
+  var createElement$1 =  createElementWithValidation ;
+  var cloneElement$1 =  cloneElementWithValidation ;
+  var createFactory =  createFactoryWithValidation ;
+  var Children = {
+    map: mapChildren,
+    forEach: forEachChildren,
+    count: countChildren,
+    toArray: toArray,
+    only: onlyChild
   };
 
-
-
-  var React$2 = Object.freeze({
-  	default: React
-  });
-
-  var React$3 = ( React$2 && React ) || React$2;
-
-  // TODO: decide on the top-level export form.
-  // This is hacky but makes it work with both Rollup and Jest.
-  var react = React$3.default || React$3;
-
-  module.exports = react;
+  exports.Children = Children;
+  exports.Component = Component;
+  exports.Fragment = REACT_FRAGMENT_TYPE;
+  exports.Profiler = REACT_PROFILER_TYPE;
+  exports.PureComponent = PureComponent;
+  exports.StrictMode = REACT_STRICT_MODE_TYPE;
+  exports.Suspense = REACT_SUSPENSE_TYPE;
+  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
+  exports.cloneElement = cloneElement$1;
+  exports.createContext = createContext;
+  exports.createElement = createElement$1;
+  exports.createFactory = createFactory;
+  exports.createRef = createRef;
+  exports.forwardRef = forwardRef;
+  exports.isValidElement = isValidElement;
+  exports.lazy = lazy;
+  exports.memo = memo;
+  exports.useCallback = useCallback;
+  exports.useContext = useContext;
+  exports.useDebugValue = useDebugValue;
+  exports.useEffect = useEffect;
+  exports.useImperativeHandle = useImperativeHandle;
+  exports.useLayoutEffect = useLayoutEffect;
+  exports.useMemo = useMemo;
+  exports.useReducer = useReducer;
+  exports.useRef = useRef;
+  exports.useState = useState;
+  exports.version = ReactVersion;
     })();
   }
   });
+  var react_development_1 = react_development.Children;
+  var react_development_2 = react_development.Component;
+  var react_development_3 = react_development.Fragment;
+  var react_development_4 = react_development.Profiler;
+  var react_development_5 = react_development.PureComponent;
+  var react_development_6 = react_development.StrictMode;
+  var react_development_7 = react_development.Suspense;
+  var react_development_8 = react_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
+  var react_development_9 = react_development.cloneElement;
+  var react_development_10 = react_development.createContext;
+  var react_development_11 = react_development.createElement;
+  var react_development_12 = react_development.createFactory;
+  var react_development_13 = react_development.createRef;
+  var react_development_14 = react_development.forwardRef;
+  var react_development_15 = react_development.isValidElement;
+  var react_development_16 = react_development.lazy;
+  var react_development_17 = react_development.memo;
+  var react_development_18 = react_development.useCallback;
+  var react_development_19 = react_development.useContext;
+  var react_development_20 = react_development.useDebugValue;
+  var react_development_21 = react_development.useEffect;
+  var react_development_22 = react_development.useImperativeHandle;
+  var react_development_23 = react_development.useLayoutEffect;
+  var react_development_24 = react_development.useMemo;
+  var react_development_25 = react_development.useReducer;
+  var react_development_26 = react_development.useRef;
+  var react_development_27 = react_development.useState;
+  var react_development_28 = react_development.version;
 
   var react = createCommonjsModule(function (module) {
 
@@ -2249,6 +2281,9 @@
   });
   var react_1 = react.useRef;
   var react_2 = react.useEffect;
+  var react_3 = react.useImperativeHandle;
+  var react_4 = react.forwardRef;
+  var react_5 = react.createRef;
 
   var reactIs_production_min = createCommonjsModule(function (module, exports) {
   Object.defineProperty(exports,"__esModule",{value:!0});
@@ -3391,7 +3426,7 @@
       if(this.useTransform){
         item.style.transform = "translate(" + left + ", " + top + ")";
       }
-      else{
+      else {
         item.style.top = top;
         item.style.left = left;
       }
@@ -3466,13 +3501,13 @@
     else { this.getReady(); }
   };
 
-  var MagicGridWrapper = function MagicGridWrapper(_ref) {
+  var MagicGridWrapper = /*#__PURE__*/react_4(function (_ref, ref) {
     var children = _ref.children,
         props = _objectWithoutProperties(_ref, ["children"]);
 
     var container = react_1(null);
+    var grid = /*#__PURE__*/react_5();
     react_2(function () {
-      var grid = null;
       var timeout; // magic-grid handles resizing via its own `listen` method
       // unfortunately event listener it creates is not being cleaned up
       // that's why we don't use it and have our own instead
@@ -3480,32 +3515,38 @@
 
       var resize = function resize() {
         if (!timeout) timeout = setTimeout(function () {
-          grid && grid.positionItems();
+          grid.current && grid.current.positionItems();
           timeout = null;
         }, 200);
       };
 
-      if (!grid) {
-        grid = new MagicGrid(_objectSpread2({
+      if (!grid.current) {
+        grid.current = new MagicGrid(_objectSpread2({
           container: container.current
         }, props));
         window.addEventListener("resize", resize);
       }
 
-      grid.positionItems();
+      grid.current.positionItems();
       return function () {
         window.removeEventListener("resize", resize);
       };
     });
-    return react.createElement("div", {
+    react_3(ref, function () {
+      return {
+        positionItems: function positionItems() {
+          grid.current && grid.current.positionItems();
+        }
+      };
+    });
+    return /*#__PURE__*/react.createElement("div", {
       ref: container
     }, children);
-  };
-
+  });
   MagicGridWrapper.propTypes = {
     children: propTypes.arrayOf(propTypes.node)
   };
 
   return MagicGridWrapper;
 
-}));
+})));
